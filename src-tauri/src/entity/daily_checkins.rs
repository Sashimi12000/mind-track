//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "daily_checkins")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub local_id: i32,
    #[sea_orm(unique)]
    pub uuid: String,
    #[sea_orm(unique)]
    pub date: Date,
    pub mood_level: i32,
    #[sea_orm(column_type = "Text")]
    pub mood_text: String,
    #[sea_orm(column_type = "Text")]
    pub physical_state_tags: String,
    #[sea_orm(column_type = "Text")]
    pub physical_state_text: String,
    #[sea_orm(column_type = "Text")]
    pub potential_todos: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub deleted_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::micro_tasks::Entity")]
    MicroTasks,
}

impl Related<super::micro_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MicroTasks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
