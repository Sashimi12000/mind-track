//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "micro_tasks")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub local_id: i32,
    #[sea_orm(unique)]
    pub uuid: String,
    pub daily_checkin_uuid: String,
    #[sea_orm(column_type = "Text")]
    pub task_description: String,
    #[sea_orm(column_type = "Text")]
    pub task_memo: String,
    pub is_completed: i32,
    pub completed_at: DateTimeWithTimeZone,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub deleted_at: DateTimeWithTimeZone,
    pub sort_order: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::daily_checkins::Entity",
        from = "Column::DailyCheckinUuid",
        to = "super::daily_checkins::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    DailyCheckins,
}

impl Related<super::daily_checkins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DailyCheckins.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
